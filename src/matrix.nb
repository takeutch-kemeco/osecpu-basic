/* matrix.nb
 * Copyright (C) 2013 Takeutch Kemeco
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef __MATRIX_NB__
#define __MATRIX_NB__

/* 3x3行列の内容を印字
 */
void print_matrix3(float *m)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = 0; i < 3; i = i + 1) {
                        __print_float(*m);
                        m = m + 1;
                }
        }

        asm("junkApi_putConstString('\n');");
}

/* 3x3単位行列
 * 単位行列 -> m
 */
void idn_matrix3(float *m)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = 0; i < 3; i = i + 1) {
                        if (i == j)
                                *m = 1.0;
                        else
                                *m = 0;

                        m = m + 1;
                }
        }
}

/* 3x3行列のスカラー倍
 * scale * m -> m
 */
void scale_matrix3(float *m, float scale)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = 0; i < 3; i = i + 1) {
                        *m = *m * scale;
                        m = m + 1;
                }
        }
}

/* 3次元ベクトルのスカラー倍
 * scale * v -> v
 */
void scale_vector3(float *v, float scale)
{
        int i;
        for (i = 0; i < 3; i = i + 1) {
                *v = *v * scale;
                v = v + 1;
        }
}

/* 3次元ベクトルの加算
 * v1 + v2 -> v0
 */
void add_vector3(float *v0, float *v1, float *v2)
{
        int i;
        for (i = 0; i < 3; i = i + 1) {
                *v0 = *v1 + *v2;
                v0 = v0 + 1;
                v1 = v1 + 1;
                v2 = v2 + 1;
        }
}

/* 3次元ベクトルの減算
 * v1 - v2 -> v0
 */
void sub_vector3(float *v0, float *v1, float *v2)
{
        int i;
        for (i = 0; i < 3; i = i + 1) {
                *v0 = *v1 - *v2;
                v0 = v0 + 1;
                v1 = v1 + 1;
                v2 = v2 + 1;
        }
}

/* 3次元ベクトルの内積
 * v1 * v2 -> return
 */
float inner_product_vector3(float *v1, float *v2)
{
        float tmp = 0;

        int i;
        for (i = 0; i < 3; i = i + 1) {
                tmp = tmp + *v1 * *v2;
                v1 = v1 + 1;
                v2 = v2 + 1;
        }

        return tmp;
}

/* 3次元ベクトルのクロス積
 * v1 . v2 -> v0
 */
void cross_product_vector3(float *v0, float *v1, float *v2)
{
        *(v0 + 0) = *(v1 + 1) * *(v2 + 2) - *(v1 + 2) * *(v2 + 1);
        *(v0 + 1) = *(v1 + 2) * *(v2 + 0) - *(v1 + 0) * *(v2 + 2);
        *(v0 + 2) = *(v1 + 0) * *(v2 + 1) - *(v1 + 1) * *(v2 + 0);
}

/* 3x3行列のコピー
 * m1 -> m0
 */
void copy_matrix3(float *m0, float *m1)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = 0; i < 3; i = i + 1) {
                        *m0 = *m1;
                        m0 = m0 + 1;
                        m1 = m1 + 1;
                }
        }
}

/* 3x3行列の全ての要素に任意のスカラー値をセットする
 * scalar -> m
 */
void set_scalar_matrix3(float *m, float scalar)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = 0; i < 3; i = i + 1) {
                        *m = scalar;
                        m = m + 1;
                }
        }
}

/* 3x3行列を転置する
 */
void transpose_matrix3(float *m)
{
        int j;
        for (j = 0; j < 3; j = j + 1) {
                int i;
                for (i = j; i < 3; i = i + 1) {
                        float tmp = *(m + ((j * 3) + i));
                        *(m + ((j * 3) + i)) = *(m + ((i * 3) + j));
                        *(m + ((i * 3) + j)) = tmp;
                }
        }
}

/* 3x3行列の乗算
 * m1 * m2 -> m0
 */
void mul_matrix3(float *m0, float *m1, float *m2)
{
        float tmp[3][3];
        float *m2t = &tmp[0][0];
        copy_matrix3(m2t, m2);
        transpose_matrix3(m2t);

        int j;
        for (j = 0; j < 3; j = j + 1) {
                float *v1 = m1 + (j * 3);

                int i;
                for (i = 0; i < 3; i = i + 1) {
                        float *v2 = m2t + (i * 3);
                        float tmp = inner_product_vector3(v1, v2);
                        *m0 = tmp;
                        m0 = m0 + 1;
                }
        }
}

/* 3x3行列と3次元ベクトルの乗算
 * m0 * v1 -> v0
 * (行列は左側、列ベクトルは右側による乗算)
 */
void mul_m3v3(float *v0, float *m0, float *v1)
{
        int i;
        for (i = 0; i < 3; i = i + 1) {
                float *m0v = m0 + (i * 3);
                float tmp = inner_product_vector3(m0v, v1);
                *v0 = tmp;
                v0 = v0 + 1;
        }
}

/* 3次元ベクトルと3x3行列の乗算
 * v1 * m0 -> v0
 * (行ベクトルは左側、行列は右側による乗算)
 */
void mul_v3m3(float *v0, float *v1, float *m0)
{
        float tmp[3][3];
        float *m0t = &tmp[0][0];
        copy_matrix3(m0t, m0);
        transpose_matrix3(m0t);

        int i;
        for (i = 0; i < 3; i = i + 1) {
                float *m0tv = m0t + (i * 3);
                float tmp = inner_product_vector3(v1, m0tv);
                *v0 = tmp;
                v0 = v0 + 1;
        }
}

/* x軸回りの回転行列を得る
 */
void rot_x_matrix3(float *m, float r)
{
        float st = __sin(r);
        float ct = __cos(r);
        idn_matrix3(m);
        *(m + (1 * 3) + 1) = ct;
        *(m + (1 * 3) + 2) = -st;
        *(m + (2 * 3) + 1) = st;
        *(m + (2 * 3) + 2) = ct;
}

/* y軸回りの回転行列を得る
 */
void rot_y_matrix3(float *m, float r)
{
        float st = __sin(r);
        float ct = __cos(r);
        idn_matrix3(m);
        *(m + (0 * 3) + 0) = ct;
        *(m + (0 * 3) + 2) = st;
        *(m + (2 * 3) + 0) = -st;
        *(m + (2 * 3) + 2) = ct;
}

/* z軸回りの回転行列を得る
 */
void rot_z_matrix3(float *m, float r)
{
        float st = __sin(r);
        float ct = __cos(r);
        idn_matrix3(m);
        *(m + (0 * 3) + 0) = ct;
        *(m + (0 * 3) + 1) = -st;
        *(m + (1 * 3) + 0) = st;
        *(m + (1 * 3) + 1) = ct;
}

/* (x,y,z)ベクトルから3x3回転行列を得る。
 * mz * my * mx -> m
 */
void rot_matrix3(float *m, float *v)
{
        float mx[3][3], my[3][3], mz[3][3], mt[3][3];
        float va[3];

        rot_x_matrix3(&mx[0][0], *(v + 0));
        rot_y_matrix3(&my[0][0], *(v + 1));
        rot_z_matrix3(&mz[0][0], *(v + 2));

        mul_matrix3(&mt[0][0], &mz[0][0], &my[0][0]);
        mul_matrix3(m, &mt[0][0], &mx[0][0]);
}

#endif /* __MATRIX_NB__ */
