/* stdoscp.nb
 * Copyright (C) 2013 Takeutch Kemeco
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef __STDOSCP_NB__
#define __STDOSCP_NB__

/* float型の値を画面へ印字する
 *
 * 引数:
 * num: 画面へ表示したい変数
 *
 * 戻り値: 無し
 */
void __print_float(float num)
{
        asm("tmp00" = num);

        /* 符号を保存しておき、正に変換 */
        asm("if (tmp00 < 0) {tmp04 = 1; tmp00 = -tmp00;} else {tmp04 = 0;}");

        /* 負の場合は-符号を表示する */
        asm("if (tmp04 == 1) {junkApi_putConstString('-');}");

        /* 整数側の表示 */
        asm("tmp02 = tmp00 >> 16;");
        asm("junkApi_putStringDec('\1', tmp02, 6, 1);");

        /* 小数点を表示 */
        asm("junkApi_putConstString('.');");

        /* 小数側の表示 */
        asm("tmp01 = 0;");
        asm("if ((tmp00 & 0x00008000) != 0) {tmp01 += 5000;}");
        asm("if ((tmp00 & 0x00004000) != 0) {tmp01 += 2500;}");
        asm("if ((tmp00 & 0x00002000) != 0) {tmp01 += 1250;}");
        asm("if ((tmp00 & 0x00001000) != 0) {tmp01 += 625;}");
        asm("if ((tmp00 & 0x00000800) != 0) {tmp01 += 312;}");
        asm("if ((tmp00 & 0x00000400) != 0) {tmp01 += 156;}");
        asm("if ((tmp00 & 0x00000200) != 0) {tmp01 += 78;}");
        asm("if ((tmp00 & 0x00000100) != 0) {tmp01 += 39;}");
        asm("if ((tmp00 & 0x00000080) != 0) {tmp01 += 19;}");
        asm("if ((tmp00 & 0x00000040) != 0) {tmp01 += 10;}");
        asm("if ((tmp00 & 0x00000020) != 0) {tmp01 += 5;}");
        asm("if ((tmp00 & 0x00000010) != 0) {tmp01 += 2;}");
        asm("if ((tmp00 & 0x00000008) != 0) {tmp01 += 1;}");
        asm("if ((tmp00 & 0x00000004) != 0) {tmp01 += 1;}");

        asm("junkApi_putStringDec('\1', tmp01, 4, 6);");

        /* 自動改行はさせない （最後にスペースを表示するのみ） */
        asm("junkApi_putConstString(' ');");
}

/* int型の値を画面へ印字する
 *
 * 引数:
 * num: 画面へ表示したい変数
 *
 * 戻り値: 無し
 */
void __print_int(int num)
{
        asm("tmp00" = num);
        asm("junkApi_putStringDec('\1', tmp00, 11, 1);");

        /* 自動改行はさせない （最後にスペースを表示するのみ） */
        asm("junkApi_putConstString(' ');");
}

/* ヒープメモリー上の任意アドレスから、１ワード読み込む
 *
 * 引数:
 * address: 読み込みたいヒープメモリーのアドレス。（アドレスはワード単位）
 *          例1:
 *              123 ワード目のアドレスから、変数 a へ1ワード読み込みたい場合:
 *              a = peek(123);
 *
 *          例2:
 *              変数 a のアドレスから、10ワード先のアドレスから、変数 b へ1ワード読み込みたい場合:
 *              b = peek(&a + 10);
 *
 * 戻り値: 読み込んだ値。（1ワード）
 */
int __peek(int *address)
{
        int ret;

        asm("tmp00" = address);
        asm("PALMEM0(fixA, T_SINT32, mem_ptr, tmp00);");

        asm(ret = "fixA");
        return ret;
}

/* ヒープメモリー上の任意アドレスへ、１ワード書き込む
 *
 * 引数:
 * address: 読み込みたいヒープメモリーのアドレス。（アドレスはワード単位）
 * value: 書き込む値
 *          例1:
 *              123 ワード目のアドレスへ、変数 a の値を1ワード書き込みたい場合:
 *              poke(123, a);
 *
 *          例2:
 *              変数 a のアドレスから、10ワード先のアドレスへ、変数 b の値を1ワード書き込みたい場合:
 *              poke(&a + 10, b);
 *
 * 戻り値: 無し
 */
void __poke(int *address, int value)
{
        asm("tmp00" = address);
        asm("tmp01" = value);
        asm("PASMEM0(tmp01, T_SINT32, mem_ptr, tmp00);");
}

/* 描画領域を初期設定して開く
 *
 * 引数:
 * width: 描画領域の横幅
 * height: 描画領域の縦幅
 *
 * 戻り値: 無し  　
 */
void __openwin(int width, int height)
{
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("junkApi_openWin(tmp00, tmp01);");
}

/* 描画領域をフレームバッファーへフラッシュする
 *
 * 引数:
 * width: フラッシュする描画領域の横幅 / 8
 * height: フラッシュする描画領域の縦幅 / 16
 * x: フラッシュする描画領域の左上点の x 座標
 * y: フラッシュする描画領域の左上点の y 座標
 *
 * 戻り値: 無し
 */
void __flushwin(int width, int height, int x, int y)
{
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("tmp02" = x);
        asm("tmp03" = y);

        asm("junkApi_flushWin(tmp00, tmp01, tmp02, tmp03);");
}

/* 指定ミリ秒間だけスリープする
 *
 * 引数:
 * mode: (1 << 0): フレームバッファーのフラッシュを行わない。
 *       (1 << 1): キー入力があるまでスリープしつづける。
 * msec: スリープ時間をミリ秒単位で指定する
 *
 * 戻り値: 無し
 */
void __sleep(int mode, int msec)
{
        asm("tmp00" = mode);
        asm("tmp01" = msec);
        asm("junkApi_sleep(tmp00, tmp01);");
}

/* アプリケーションの終了
 *
 * 引数:
 * retval: この値をアプリケーションの戻り値とする
 *
 * 戻り値: 無し
 */
void __exit(int retval)
{
        asm("tmp00" = retval);
        asm("jnukApi_exit(tmp00);");
}

/* 矩形範囲の塗りつぶし
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * width: 矩形の横幅
 * height: 矩形の縦幅
 * x: 矩形の左上点の x 座標
 * y: 矩形の左上点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __fillrect(int mode, int width, int height, int x, int y, int color)
{
        asm("tmp05" = mode);
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("tmp02" = x);
        asm("tmp03" = y);
        asm("tmp04" = color);

        asm("junkApi_fillRect(tmp05, tmp00, tmp01, tmp02, tmp03, tmp04);");
}

/* 矩形を描画
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * width: 矩形の横幅
 * height: 矩形の縦幅
 * x: 矩形の左上点の x 座標
 * y: 矩形の左上点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __drawrect(int mode, int width, int height, int x, int y, int color)
{
        asm("tmp05" = mode);
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("tmp02" = x);
        asm("tmp03" = y);
        asm("tmp04" = color);

        asm("junkApi_drawRect(tmp05, tmp00, tmp01, tmp02, tmp03, tmp04);");
}

/* 点を描画
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * x: 矩形の左上点の x 座標
 * y: 矩形の左上点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __drawpoint(int mode, int x, int y, int color)
{
        asm("tmp05" = mode);
        asm("tmp02" = x);
        asm("tmp03" = y);
        asm("tmp04" = color);

        asm("junkApi_drawPoint(tmp05, tmp02, tmp03, tmp04);");
}

/* 楕円の塗りつぶし
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * width: 矩形の横幅
 * height: 矩形の縦幅
 * x: 矩形の左上点の x 座標
 * y: 矩形の左上点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __filloval(int mode, int width, int height, int x, int y, int color)
{
        asm("tmp05" = mode);
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("tmp02" = x);
        asm("tmp03" = y);
        asm("tmp04" = color);

        asm("junkApi_fillOval(tmp05, tmp00, tmp01, tmp02, tmp03, tmp04);");
}

/* 楕円を描画
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * width: 矩形の横幅
 * height: 矩形の縦幅
 * x: 矩形の左上点の x 座標
 * y: 矩形の左上点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __drawoval(int mode, int width, int height, int x, int y, int color)
{
        asm("tmp05" = mode);
        asm("tmp00" = width);
        asm("tmp01" = height);
        asm("tmp02" = x);
        asm("tmp03" = y);
        asm("tmp04" = color);

        asm("junkApi_drawOval(tmp05, tmp00, tmp01, tmp02, tmp03, tmp04);");
}

/* 線分を描画
 *
 * 引数:
 * mode: 0: 通常の描画
 *       1: OR描画
 *       2: XOR描画
 *       3: AND描画
 *       (1 << 2): 8色モード（color を 0~2bit=B, 3~5bit=G, 6~9bit=R として扱う）
 *       (1 << 4): 画面外への描画をエラーとしない
 * x0: 線分の始点の x 座標
 * y0: 線分の始点の y 座標
 * x1: 線分の終点の x 座標
 * y1: 線分の終点の y 座標
 * color: 通常は、塗りつぶしの色を 0x00RRGGBB の形式で指定。
 *        mode が (1 << 4) の場合は各色3bitによる形式で指定。
 *
 * 戻り値: 無し
 */
void __drawline(int mode, int x0, int y0, int x1, int y1, int color)
{
        asm("tmp05" = mode);
        asm("tmp00" = x0);
        asm("tmp01" = y0);
        asm("tmp02" = x1);
        asm("tmp03" = y1);
        asm("tmp04" = color);

        asm("junkApi_drawLine(tmp05, tmp00, tmp01, tmp02, tmp03, tmp04);");
}

/* キーボード入力を得る
 *
 * 引数:
 * mode: 0: キーコードを得る。
 *       1: キーボードバッファーをクリアーせずにキーコードを得る。
 *
 * 戻り値: キーコード
 */
int __inkey(int mode)
{
        int ret;

        asm("tmp05" = mode);
        asm("junkApi_inkey(fixA, tmp05);");

        asm(ret = "fixA");
        return ret;
}

/* 乱数を得る
 *
 * 引数:
 * max: 乱数の最大値
 *
 * 戻り値: キーコード
 */
int __rand(int max)
{
        int ret;

        asm("tmp00" = max);
        asm("junkApi_rand(fixA, tmp00);");

        asm(ret = "fixA");
        return ret;
}

#endif /* __STDOSCP_NB__ */
