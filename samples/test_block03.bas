/* ブロック内から外部へ goto や gosub した場合は、
 * そのジャンプ先がブロック外である場合は、ブロック内で宣言されたローカル変数は無効となる。
 * そして、ジャンプ先から再びブロック内に戻ってきた場合であれば、ローカル変数は再び有効となる。（値も保持されたままで）
 *
 * 一方、ジャンプ先がブロック内である場合は、ローカル変数もそのまま有効となる。
 *
 * すなわち、たとえばブロックの途中で goto によってブロックを抜ければ、
 * （普通にブロックの最後まで到達した場合と同様に）、ブロック内のローカル変数は破棄され、オーバーライドは解除される。
 *
 * また逆に、ブロックの外から goto などでブロック内にジャンプしてきた場合でも、
 * ブロック内で宣言された変数は（ブロック内の宣言行を読み飛ばした位置へジャンプしてきた場合でも）、既に宣言された状態となる。
 * しかし、宣言はされるが、初期値が代入済みかどうかに関しては別の話となる。
 * 初期値を代入する行を読み飛ばした場合等であれば、これに関してはの動作は不定となる。
 * （おそらく初期化はされてないか、またはゴミが入った状態となるだろう）
 */

dim a = 123;

{
        dim a = 234;

        l0();
        print a;
}

print a;



dim b = 345;
goto *LB;

{
        dim b;
*LB;
        b = 456;
        print b;
}


dim c = 567;
goto *LC;

{
        dim c = 678;
*LC;
        print c;
}



function l0()
{
        print a;
}
